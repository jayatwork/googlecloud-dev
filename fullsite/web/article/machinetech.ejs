<!DOCTYPE html>

<html>
   <head>
         <meta charset="UTF-8">


      <!-- The welcome struct (shown in the main.go code) is received within the HTML and we just need to use the . operator and retrieve the information we want -->
         <title>Team27Live</title>
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
      <link rel="stylesheet" href="/static/stylesheets/welcome-template.css">
      <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
      <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>


  <style>
  .jumbotron {
    background-color: #f4511e;
    color: #fff;
    padding: 100px 25px;
  }
  .container-fluid {
    padding: 60px 50px;
  }
  .bg-grey {
    background-color: #f6f6f6;
  }
  .logo-small {
    color: #f4511e;
    font-size: 50px;
  }
  .logo {
    color: #f4511e;
    font-size: 200px;
  }
  @media screen and (max-width: 768px) {
    .col-sm-4 {
      text-align: center;
      margin: 25px 0;
    }
  }
  </style>




<nav class="navbar navbar-inverse">
  <div class="container-fluid">
    <div class="navbar-header">
      <a class="navbar-brand" href="https://github.com/jayatwork/googlecloud-dev.git">team27 SOURCE (github)</a>
    </div>
    <ul class="nav navbar-nav">
      <li class="active"><a href="../">Home</a></li>
      <li class="dropdown"><a class="dropdown-toggle" data-toggle="dropdown" href="news.ejs">News <span class="caret"></span></a>
        <ul class="dropdown-menu">
          <li><a href="../../news1-1.ejs">Page 1-1</a></li>
          <li><a href="../../news1-2.ejs">Page 1-2</a></li>
          <li><a href="../../news1-3.ejs">Page 1-3</a></li>
        </ul>
      </li>
      <li><a href="all27.ejs">All things 27</a></li>
      <li><a href="vids.ejs">Recent vids</a></li>
    </ul>
  </div>
</nav>

<b>OpenAI<b> <br><br> is an AI research and deployment company based in San Francisco, California. <br>
Specifically, <b>Gym Retro<b>, is used to conduct research on Reinforcement Learning algorithms and study generalization. Prior research in RL has mostly focused on optimizing agents to solve single tasks. With Gym Retro, it is advertised that folks can study the ability to generalize between games with similar concepts but different appearances.

This release includes games from the Sega Genesis and Sega Master System, and Nintendoâ€™s NES, SNES, and Game Boy consoles. It also includes preliminary support for the Sega Game Gear, Nintendo Game Boy Color, Nintendo Game Boy Advance, and NEC TurboGrafx. Some of the released game integrations, including those games in the data/experimental folder of Gym Retro, are in a beta state

<!-- embed video-->
<iframe width="420" height="315"
src="https://www.youtube.com/embed/fwwHJy7B9IE">
</iframe>
<br>
<br>

<!-- show code for retro examples-->
<pre><span></span><span class="kn">import</span> <span class="nn">retro</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">env</span> <span class="o">=</span> <span class="n">retro</span><span class="o">.</span><span class="n">make</span><span class="p">(</span><span class="n">game</span><span class="o">=</span><span class="s1">'Airstriker-Genesis'</span><span class="p">)</span>
    <span class="n">obs</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="n">reset</span><span class="p">()</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">obs</span><span class="p">,</span> <span class="n">rew</span><span class="p">,</span> <span class="n">done</span><span class="p">,</span> <span class="n">info</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="n">env</span><span class="o">.</span><span class="n">action_space</span><span class="o">.</span><span class="n">sample</span><span class="p">())</span>
        <span class="n">env</span><span class="o">.</span><span class="n">render</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">done</span><span class="p">:</span>
            <span class="n">obs</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="n">reset</span><span class="p">()</span>
    <span class="n">env</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">"__main__"</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre>

<!-- current work -->
<p><strong>What's being worked on</strong></p><br>

    <div id="id01"></div>

<script>
var xmlhttp = new XMLHttpRequest();
var url = "servers.json";

xmlhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
        var myArr = JSON.parse(this.responseText);
        myFunction(myArr);
    }
};
xmlhttp.open("GET", url, true);
xmlhttp.send();

function myFunction(arr) {
    var out = "";
    var i;


    for(i = 0; i < arr.length; i++) {
        if (i < 3) {  <!-- determine where to drop into collection -->
            out += '<a href="' + arr[i].url + '">' +
            arr[i].display + '</a><br><br>';
        }
    }
    document.getElementById("id01").innerHTML = out;
}
</script>


   </body>
</html>
